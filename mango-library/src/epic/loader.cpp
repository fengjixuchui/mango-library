#include "../../include/epic/loader.h"

#include "../../include/epic/process.h"
#include "../../include/epic/shellcode.h"
#include "../../include/epic/shellcode_wrappers.h"
#include "../../include/misc/logger.h"
#include "../../include/misc/scope_guard.h"
#include "../../include/misc/error_codes.h"
#include "../../include/misc/memory_allocator.h"
#include "../../include/crypto/string_encryption.h"

#include <filesystem>

#undef min

namespace {
	template <typename Ptr>
	struct ManualMapData {
		Ptr modulebase;
		Ptr getprocaddress;
		Ptr loadlibrary;
	};

	// in case i need to modify the shellcode later
#if false
	DWORD WINAPI manual_map_thread(void* arg) {
		const auto data = reinterpret_cast<ManualMapData<uintptr_t>*>(arg);
		const auto dos_header = PIMAGE_DOS_HEADER(data->m_module_base);
		const auto nt_header = PIMAGE_NT_HEADERS(data->m_module_base + dos_header->e_lfanew);

		auto import_descriptor = PIMAGE_IMPORT_DESCRIPTOR(data->m_module_base + 
			nt_header->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);

		// fix imports
		for (; import_descriptor->OriginalFirstThunk; import_descriptor++) {
			// module name
			const auto module_name = reinterpret_cast<const char*>(data->m_module_base + import_descriptor->Name);

			// load the library
			using load_library_fn = HMODULE(__stdcall*)(const char*);
			const auto hmodule = load_library_fn(data->m_load_library)(module_name);

			auto first_thunk = PIMAGE_THUNK_DATA(data->m_module_base + import_descriptor->FirstThunk),
				orig_first_thunk = PIMAGE_THUNK_DATA(data->m_module_base + import_descriptor->OriginalFirstThunk);

			// iterate through both arrays of thunks at the same time
			for (; orig_first_thunk->u1.AddressOfData; orig_first_thunk++, first_thunk++) {
				// import name
				const auto import_name = PIMAGE_IMPORT_BY_NAME(data->m_module_base + orig_first_thunk->u1.AddressOfData);

				// set the import address
				using get_proc_address_fn = uintptr_t(__stdcall*)(HMODULE, LPCSTR);
				first_thunk->u1.Function = get_proc_address_fn(data->m_get_proc_address)(hmodule, import_name->Name);
			}
		}

		// call the entrypoint
		using entry_point_fn = BOOL(WINAPI*)(HINSTANCE, DWORD, LPVOID);
		const auto entry_point = entry_point_fn(data->m_module_base + nt_header->OptionalHeader.AddressOfEntryPoint);
		entry_point(HINSTANCE(data->m_module_base), DLL_PROCESS_ATTACH, nullptr);

		return 0;
	}
	void end_stub() {}
#endif

	// fix base relocations in the image
	template <typename Ptr>
	void fix_image_relocations(const mango::Process& process, const Ptr module_base, const Ptr delta, const Ptr reloc_dir_addr) {
		auto base_reloc_addr{ module_base + reloc_dir_addr };

		// fix up relocations
		while (true) {
			const auto base_reloc{ process.read<IMAGE_BASE_RELOCATION>(base_reloc_addr) };
			if (!base_reloc.VirtualAddress)
				break;

			if (base_reloc.SizeOfBlock > 0) {
				struct RelocEntry {
					uint16_t offset : 12,
						type : 4;
				};

				// the IMAGE_BASE_RELOCATION is included in the SizeOfBlock
				const auto num_entries{ (base_reloc.SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(RelocEntry) };
				const auto relocations_addr{ base_reloc_addr + sizeof(IMAGE_BASE_RELOCATION) };

				// fix each relocation in the block
				for (size_t i{ 0 }; i < num_entries; i++) {
					const auto entry{ process.read<RelocEntry>(relocations_addr + sizeof(RelocEntry) * i) };
					const auto address{ module_base + base_reloc.VirtualAddress + entry.offset };

					if (entry.type == IMAGE_REL_BASED_HIGHLOW) {
						const auto value = process.read<uint32_t>(address);
						process.write(address, uint32_t(value + delta));
					} else if (entry.type == IMAGE_REL_BASED_DIR64) {
						const auto value = process.read<uint64_t>(address);
						process.write(address, uint64_t(value + delta));
					}
				}
			}

			// go to next block
			base_reloc_addr += base_reloc.SizeOfBlock;
		}
	}

	// the real "meat" of manual_map()
	template <bool is64bit>
	uintptr_t manual_map_internal(const mango::Process& process, const uint8_t* const image) {
		using Ptr = std::conditional_t<is64bit, uint64_t, uint32_t>;
		using PImageNtHeaders = std::conditional_t<is64bit, PIMAGE_NT_HEADERS64, PIMAGE_NT_HEADERS32>;

		// dos header
		const auto dos_header{ PIMAGE_DOS_HEADER(image) };
		if (dos_header->e_magic != IMAGE_DOS_SIGNATURE)
			throw mango::InvalidPEHeader{};

		// nt header
		const auto nt_header{ PImageNtHeaders(image + dos_header->e_lfanew) };
		if (nt_header->Signature != IMAGE_NT_SIGNATURE)
			throw mango::InvalidPEHeader{};

		// make sure the image architecture matches
		if constexpr (is64bit) {
			if (nt_header->FileHeader.Machine == IMAGE_FILE_MACHINE_I386)
				throw mango::UnmatchingImageArchitecture{ enc_str("x86 image detected.") };
		} else {
			if (nt_header->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64)
				throw mango::UnmatchingImageArchitecture{ enc_str("x64 image detected.") };
		}

		// base address of the module in memory
		const auto module_base{ uintptr_t(process.alloc_virt_mem(nt_header->OptionalHeader.SizeOfImage, PAGE_EXECUTE_READWRITE)) };

		// copy the pe header to memory
		process.write(module_base, image, nt_header->OptionalHeader.SizeOfHeaders);

		// copy each section to memory
		const auto section_headers{ PIMAGE_SECTION_HEADER(nt_header + 1) };
		for (size_t i{ 0 }; i < nt_header->FileHeader.NumberOfSections; i++) {
			process.write(module_base + section_headers[i].VirtualAddress,
				image + section_headers[i].PointerToRawData, section_headers[i].SizeOfRawData);
		}

		// fix relocations
		const auto reloc_delta{ Ptr(module_base) - Ptr(nt_header->OptionalHeader.ImageBase) };
		const auto reloc_dir_addr{ nt_header->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress };
		fix_image_relocations<Ptr>(process, Ptr(module_base), reloc_delta, reloc_dir_addr);

		// shellcode for the loader thread
		mango::Shellcode shellcode{};
		if (process.is_64bit()) {
			shellcode.push(
				"\x40\x53\x57\x41\x57\x48\x83\xEC\x20\x48\x8B\xF9\x48\x8B\x09\x4C\x63\x79\x3C\x4C\x03\xF9\x41\x8B",
				"\x9F\x90\x00\x00\x00\x48\x03\xD9\x83\x3B\x00\x74\x7D\x48\x89\x6C\x24\x40\x48\x89\x74\x24\x48\x4C",
				"\x89\x74\x24\x50\x8B\x4B\x0C\x48\x03\x0F\x48\x8B\x47\x10\xFF\xD0\x48\x8B\x0F\x48\x8B\xE8\x8B\x33",
				"\x44\x8B\x73\x10\x48\x03\xF1\x4C\x03\xF1\x48\x8B\x16\x48\x85\xD2\x74\x30\x66\x0F\x1F\x44\x00\x00",
				"\x48\x8B\x07\x48\x8B\xCD\x4C\x8B\x47\x08\x48\x83\xC0\x02\x48\x03\xD0\x41\xFF\xD0\x49\x89\x06\x48",
				"\x8D\x76\x08\x48\x8B\x16\x4D\x8D\x76\x08\x48\x85\xD2\x75\xD9\x48\x8B\x0F\x48\x83\xC3\x14\x83\x3B",
				"\x00\x75\xA1\x4C\x8B\x74\x24\x50\x48\x8B\x74\x24\x48\x48\x8B\x6C\x24\x40\x41\x8B\x47\x28\x45\x33",
				"\xC0\x48\x03\xC1\x41\x8D\x50\x01\xFF\xD0\x33\xC0\x48\x83\xC4\x20\x41\x5F\x5F\x5B\xC3\xCC\xCC\xCC",
				"\x48\x83\x79\x30\x10\x48\x8D\x41\x18\x72\x03\x48\x8B\x00\xC3\xCC\x48\x89\x5C\x24\x08\x48\x89\x74",
				"\x24\x10\x57\x48\x83\xEC\x20\x49\x8B\xD9\x49\x8B\xF0\x48\x8B\xFA\x4D\x85\xC9\x74\x41\x48\x85\xC9",
				"\x75\x27\xFF\x15\xA8\xFF\x00\x00\xC7\x00\x16\x00\x00\x00\xFF\x15\xDC\xFF\x00\x00\xB8\x16\x00\x00",
				"\x00\x48\x8B\x5C\x24\x30\x48\x8B\x74\x24\x38\x48\x83\xC4\x20\x5F\xC3\x48\x85\xF6\x74\x22\x48\x3B",
				"\xFB\x72\x1D\x4C\x8B\xC3\x48\x8B\xD6\xE8\xA0\xE5\x00\x00\x33\xC0\x48\x8B\x5C\x24\x30\x48\x8B\x74",
				"\x24\x38\x48\x83\xC4\x20\x5F\xC3\x4C\x8B\xC7\x33\xD2\xE8\x90\xE5\x00\x00\x48\x85\xF6\x74\xA3\x48",
				"\x3B\xFB\x73\xB0\xFF\x15\x46\xFF\x00\x00\xC7\x00\x22\x00\x00\x00\xFF\x15\x7A\xFF\x00\x00\x48\x8B",
				"\x5C\x24\x30\xB8\x22\x00\x00\x00\x48\x8B\x74\x24\x38\x48\x83\xC4\x20\x5F\xC3\xCC\xCC\xCC\xCC\xCC",
				"\x4C\x8B\xDC\x49\x89\x5B\x10\x49\x89\x6B\x18\x49\x89\x73\x20\x57\x48\x81\xEC\x80\x00\x00\x00\x48",
				"\x8B\x05\x5A\x6B\x01\x00\x48\x33\xC4\x48\x89\x44\x24\x70\x48\x8B\xF9\x48\x89\x4C\x24\x40\x48\xB8",
				"\xB6\x8A\xF5\x5A\xB5\x0D\x23\x49\x49\x89\x43\xC0\x48\xB8\xAE\xE7\x98\xAA\x94\xE3\x70\x92\x49\x89",
				"\x43\xC8\x48\xB8\xBB\xA5\x3F\xEF\xD5\x52\x6F\xA7\x49\x89\x43\xD0\x48\xB8\xEF\xF2\xBC\xDE\x4E\x54",
				"\x09\x8A\x49\x89\x43\xD8\x48\xBD\xF0\xEB\x9C\x36\xD0\x69\x03\x3D\x49\x89\x6B\xE0\x45\x33\xC0\x41",
				"\x8D\x50\x1D\x49\x8D\x4B\x98\xE8\x3C\xED\xFF\xFF\x45\x33\xD2\x41\x8D\x72\x08\x0F\x1F\x44\x00\x00",
				"\x49\x8B\xC2\x48\xC1\xE8\x03\x48\x8D\x1C\x28\x48\x33\x5C\xC4\x48\x48\x0F\xAF\xC5\x48\x2B\xD8\x33",
				"\xC0\x41\xB9\x1D\x00\x00\x00\x4D\x2B\xCA\x45\x33\xDB\x66\x66\x66\x0F\x1F\x84\x00\x00\x00\x00\x00",
				"\x49\x8B\xC9\x4C\x3B\xCE\x48\x0F\x47\xCE\x48\x3B\xC1\x73\x2A\x4C\x8D\x44\x24\x20\x48\x83\x7C\x24",
				"\x38\x10\x4C\x0F\x43\x44\x24\x20\x48\x8B\xD3\x49\x8B\xCB\x48\xD3\xEA\x49\x8D\x0C\x00\x42\x88\x14",
				"\x11\x48\xFF\xC0\x4C\x03\xDE\xEB\xC7\x4C\x03\xD6\x49\x83\xFA\x1D\x72\x8E\x48\x8D\x54\x24\x20\x48",
				"\x8B\xCF\xE8\xE1\xD5\xFF\xFF\x90\x48\x8B\x54\x24\x38\x48\x83\xFA\x10\x72\x35\x48\xFF\xC2\x48\x8B",
				"\x4C\x24\x20\x48\x8B\xC1\x48\x81\xFA\x00\x10\x00\x00\x72\x1C\x48\x83\xC2\x27\x48\x8B\x49\xF8\x48",
				"\x2B\xC1\x48\x83\xC0\xF8\x48\x83\xF8\x1F\x76\x07\xFF\x15\x2E\xFE\x00\x00\xCC\xE8\x00\xD4\x00\x00",
				"\x48\x8D\x05\xB1\x02\x01\x00\x48\x89\x07\x48\x8B\xC7\x48\x8B\x4C\x24\x70\x48\x33\xCC\xE8\x96\xD7",
				"\x00\x00\x4C\x8D\x9C\x24\x80\x00\x00\x00\x49\x8B\x5B\x18\x49\x8B\x6B\x20\x49\x8B\x73\x28\x49\x8B",
				"\xE3\x5F\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x4C\x8B\xDC\x49\x89\x5B\x10\x49",
				"\x89\x6B\x18\x49\x89\x73\x20\x57\x48\x81\xEC\x80\x00\x00\x00\x48\x8B\x05\xCA\x69\x01\x00\x48\x33",
				"\xC4\x48\x89\x44\x24\x70\x48\x8B\xF9\x48\x89\x4C\x24\x40\x48\xB8\xB6\x8A\xF5\x5A\xB5\x0D\x23\x49",
				"\x49\x89\x43\xC0\x48\xB8\xAE\xE7\x90\x91\xE5\xB1\x20\x90\x49\x89\x43\xC8\x48\xB8\xA0\xAC\x01\xE4",
				"\xC3\x2E\x24\xD3\x49\x89\x43\xD0\x48\xB8\xCC\xC4\xA0\x24\x4F\x54\x09\x8A\x49\x89\x43\xD8\x48\xBD",
				"\xF0\xEB\x9C\x36\xD0\x69\x03\x3D\x49\x89\x6B\xE0\x45\x33\xC0\x41\x8D\x50\x1D\x49\x8D\x4B\x98\xE8",
				"\xAC\xEB\xFF\xFF\x45\x33\xD2\x41\x8D\x72\x08\x0F\x1F\x44\x00\x00\x49\x8B\xC2\x48\xC1\xE8\x03\x48",
				"\x8D\x1C\x28\x48\x33\x5C\xC4\x48\x48\x0F\xAF\xC5\x48\x2B\xD8\x33\xC0\x41\xB9\x1D\x00\x00\x00\x4D",
				"\x2B\xCA\x45\x33\xDB\x66\x66\x66\x0F\x1F\x84\x00\x00\x00\x00\x00\x49\x8B\xC9\x4C\x3B\xCE\x48\x0F",
				"\x47\xCE\x48\x3B\xC1\x73\x2A\x4C\x8D\x44\x24\x20\x48\x83\x7C\x24\x38\x10\x4C\x0F\x43\x44\x24\x20",
				"\x48\x8B\xD3\x49\x8B\xCB\x48\xD3\xEA\x49\x8D\x0C\x00\x42\x88\x14\x11\x48\xFF\xC0\x4C\x03\xDE\xEB",
				"\xC7\x4C\x03\xD6\x49\x83\xFA\x1D\x72\x8E\x48\x8D\x54\x24\x20\x48\x8B\xCF\xE8\x51\xD4\xFF\xFF\x90",
				"\x48\x8B\x54\x24\x38\x48\x83\xFA\x10\x72\x35\x48\xFF\xC2\x48\x8B\x4C\x24\x20\x48\x8B\xC1\x48\x81",
				"\xFA\x00\x10\x00\x00\x72\x1C\x48\x83\xC2\x27\x48\x8B\x49\xF8\x48\x2B\xC1\x48\x83\xC0\xF8\x48\x83",
				"\xF8\x1F\x76\x07\xFF\x15\x9E\xFC\x00\x00\xCC\xE8\x70\xD2\x00\x00\x48\x8D\x05\x21\x01\x01\x00\x48",
				"\x89\x07\x48\x8B\xC7\x48\x8B\x4C\x24\x70\x48\x33\xCC\xE8\x06\xD6\x00\x00\x4C\x8D\x9C\x24\x80\x00",
				"\x00\x00\x49\x8B\x5B\x18\x49\x8B\x6B\x20\x49\x8B\x73\x28\x49\x8B\xE3\x5F\xC3\xCC\xCC\xCC\xCC\xCC",
				"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x40\x53\x48\x83\xEC\x50\x48\x8B\xD9\x48\x89\x4C\x24\x28\x48\x8D",
				"\x54\x24\x30\x48\x8D\x4C\x24\x20\xE8\x03\x46\x00\x00\x90\x48\x8B\xD0\x48\x8B\xCB\xE8\xA7\xD3\xFF",
				"\xFF\x90\x48\x8B\x54\x24\x48\x48\x83\xFA\x10\x72\x35\x48\xFF\xC2\x48\x8B\x4C\x24\x30\x48\x8B\xC1",
				"\x48\x81\xFA\x00\x10\x00\x00\x72\x1C\x48\x83\xC2\x27\x48\x8B\x49\xF8\x48\x2B\xC1\x48\x83\xC0\xF8",
				"\x48\x83\xF8\x1F\x76\x07\xFF\x15\xF4\xFB\x00\x00\xCC\xE8\xC6\xD1\x00\x00\x48\x8D\x05\x77\x00\x01",
				"\x00\x48\x89\x03\x48\x8B\xC3\x48\x83\xC4\x50\x5B\xC3\xCC\xCC\xCC\x4C\x8B\xDC\x49\x89\x5B\x10\x49",
				"\x89\x6B\x18\x49\x89\x73\x20\x57\x48\x81\xEC\x80\x00\x00\x00\x48\x8B\x05\xBA\x67\x01\x00\x48\x33",
				"\xC4\x48\x89\x44\x24\x70\x48\x8B\xF9\x48\x89\x4C\x24\x40\x48\xB8\xB6\x8A\xF5\x5A\xB5\x0D\x23\x49",
				"\x49\x89\x43\xC0\x48\xB8\xAE\xE7\x92\x9A\xE5\xB5\x7F\x60\x49\x89\x43\xC8\x48\xB8\xA2\xA1\x35\xE6",
				"\xD5\x2E\x79\xA7\x49\x89\x43\xD0\x48\xB8\xCD\xCE\xD8\x3F\x4F\x54\x09\x8A\x49\x89\x43\xD8\x48\xBD",
				"\xF0\xEB\x9C\x36\xD0\x69\x03\x3D\x49\x89\x6B\xE0\x45\x33\xC0\x41\x8D\x50\x1D\x49\x8D\x4B\x98\xE8",
				"\x9C\xE9\xFF\xFF\x45\x33\xD2\x41\x8D\x72\x08\x0F\x1F\x44\x00\x00\x49\x8B\xC2\x48\xC1\xE8\x03\x48",
				"\x8D\x1C\x28\x48\x33\x5C\xC4\x48\x48\x0F\xAF\xC5\x48\x2B\xD8\x33\xC0\x41\xB9\x1D\x00\x00\x00\x4D",
				"\x2B\xCA\x45\x33\xDB\x66\x66\x66\x0F\x1F\x84\x00\x00\x00\x00\x00\x49\x8B\xC9\x4C\x3B\xCE\x48\x0F",
				"\x47\xCE\x48\x3B\xC1\x73\x2A\x4C\x8D\x44\x24\x20\x48\x83\x7C\x24\x38\x10\x4C\x0F\x43\x44\x24\x20",
				"\x48\x8B\xD3\x49\x8B\xCB\x48\xD3\xEA\x49\x8D\x0C\x00\x42\x88\x14\x11\x48\xFF\xC0\x4C\x03\xDE\xEB",
				"\xC7\x4C\x03\xD6\x49\x83\xFA\x1D\x72\x8E\x48\x8D\x54\x24\x20\x48\x8B\xCF\xE8\x41\xD2\xFF\xFF\x90",
				"\x48\x8B\x54\x24\x38\x48\x83\xFA\x10\x72\x35\x48\xFF\xC2\x48\x8B\x4C\x24\x20\x48\x8B\xC1\x48\x81",
				"\xFA\x00\x10\x00\x00\x72\x1C\x48\x83\xC2\x27\x48\x8B\x49\xF8\x48\x2B\xC1\x48\x83\xC0\xF8\x48\x83",
				"\xF8\x1F\x76\x07\xFF\x15\x8E\xFA\x00\x00\xCC\xE8\x60\xD0\x00\x00\x48\x8D\x05\x11\xFF\x00\x00\x48",
				"\x89\x07\x48\x8B\xC7\x48\x8B\x4C\x24\x70\x48\x33\xCC\xE8\xF6\xD3\x00\x00\x4C\x8D\x9C\x24\x80\x00",
				"\x00\x00\x49\x8B\x5B\x18\x49\x8B\x6B\x20\x49\x8B\x73\x28\x49\x8B\xE3\x5F\xC3\xCC\xCC\xCC\xCC\xCC",
				"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x4C\x8B\xDC\x49\x89\x5B\x10\x49\x89\x6B\x18\x49\x89\x73\x20\x57",
				"\x48\x81\xEC\x80\x00\x00\x00\x48\x8B\x05\x2A\x66\x01\x00\x48\x33\xC4\x48\x89\x44\x24\x70\x48\x8B",
				"\xF9\x48\x89\x4C\x24\x40\x48\xB8\x3E\x3D\x77\xE9\x8E\x35\x98\x9A\x49\x89\x43\xC0\x48\xB8\x9E\x20",
				"\x8E\x6F\xA7\xE7\x60\xB0\x49\x89\x43\xC8\x48\xB8\x18\x74\xBE\xEA\xA1\x46\x29\xA4\x49\x89\x43\xD0",
				"\x48\xB8\xB6\xDE\xD4\x84\xD7\x75\x91\x22\x49\x89\x43\xD8\x48\xBD\x78\x5C\x1E\x85\xEB\x51\xB8\xEE",
				"\x49\x89\x6B\xE0\x45\x33\xC0\x41\x8D\x50\x1E\x49\x8D\x4B\x98\xE8\x0C\xE8\xFF\xFF\x45\x33\xD2\x41",
				"\x8D\x72\x08\x0F\x1F\x44\x00\x00\x49\x8B\xC2\x48\xC1\xE8\x03\x48\x8D\x1C\x28\x48\x33\x5C\xC4\x48"
			);
		} else {
			shellcode.push(
				"\x55\x8B\xEC\x83\xEC\x0C\x53\x56\x8B\x75\x08\x8B\x16\x8B\x42\x3C\x03\xC2\x89\x45\xF4\x8B\x98\x80"
				"\x00\x00\x00\x03\xDA\x89\x5D\x08\x83\x3B\x00\x74\x5D\x57\x8B\x4B\x0C\x03\x0E\x8B\x46\x08\x51\xFF"
				"\xD0\x8B\x16\x8B\x3B\x8B\x4B\x10\x03\xFA\x03\xCA\x89\x45\xF8\x89\x4D\xFC\x8B\x0F\x85\xC9\x74\x2B"
				"\x8B\x5D\xFC\x0F\x1F\x44\x00\x00\x8B\x06\x03\xC1\x8B\x4E\x04\x83\xC0\x02\x50\xFF\x75\xF8\xFF\xD1"
				"\x89\x03\x8D\x7F\x04\x8B\x0F\x8D\x5B\x04\x85\xC9\x75\xE2\x8B\x16\x8B\x5D\x08\x83\xC3\x14\x89\x5D"
				"\x08\x83\x3B\x00\x75\xA8\x8B\x45\xF4\x5F\x8B\x40\x28\x6A\x00\x6A\x01\x52\x03\xC2\xFF\xD0\x5E\x33"
				"\xC0\x5B\x8B\xE5\x5D\xC2\x04\x00\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x83\x79\x20\x10\x8D\x41\x0C\x72"
				"\x02\x8B\x00\xC3\xCC\xCC\xCC\xCC\x55\x8B\xEC\x56\x8B\x75\x14\x85\xF6\x75\x05\x33\xC0\x5E\x5D\xC3"
				"\x8B\x45\x08\x85\xC0\x75\x1A\xFF\x15\x18\xC2\x34\x00\xC7\x00\x16\x00\x00\x00\xFF\x15\x1C\xC2\x34"
				"\x00\xB8\x16\x00\x00\x00\x5E\x5D\xC3\x53\x8B\x5D\x10\x57\x8B\x7D\x0C\x85\xDB\x74\x16\x3B\xFE\x72"
				"\x12\x56\x53\x50\xE8\xEB\xCF\x00\x00\x83\xC4\x0C\x33\xC0\x5F\x5B\x5E\x5D\xC3\x57\x6A\x00\x50\xE8"
				"\xE4\xCF\x00\x00\x83\xC4\x0C\x85\xDB\x75\x1C\xFF\x15\x18\xC2\x34\x00\xC7\x00\x16\x00\x00\x00\xFF"
				"\x15\x1C\xC2\x34\x00\x5F\x5B\xB8\x16\x00\x00\x00\x5E\x5D\xC3\x3B\xFE\x73\xF2\xFF\x15\x18\xC2\x34"
				"\x00\xC7\x00\x22\x00\x00\x00\xFF\x15\x1C\xC2\x34\x00\x5F\x5B\xB8\x22\x00\x00\x00\x5E\x5D\xC3\xCC"
				"\x55\x8B\xEC\x6A\xFF\x68\x48\xA8\x34\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x20\x56\xA1\x14\x20"
				"\x35\x00\x33\xC5\x50\x8D\x45\xF4\x64\xA3\x00\x00\x00\x00\x8B\xF1\x89\x75\xEC\x8D\x45\xD4\x89\x75"
				"\xEC\x50\x8D\x4D\xF3\xE8\xF6\x31\x00\x00\x50\x8B\xCE\xC7\x45\xFC\x00\x00\x00\x00\xE8\x47\xC8\xFF"
				"\xFF\x8B\x55\xE8\x83\xFA\x10\x72\x2E\x8B\x4D\xD4\x42\x8B\xC1\x81\xFA\x00\x10\x00\x00\x72\x16\x8B"
				"\x49\xFC\x83\xC2\x23\x2B\xC1\x83\xC0\xFC\x83\xF8\x1F\x76\x06\xFF\x15\x08\xC2\x34\x00\x52\x51\xE8"
				"\x08\xBD\x00\x00\x83\xC4\x08\xC7\x06\x74\xC5\x34\x00\x8B\xC6\x8B\x4D\xF4\x64\x89\x0D\x00\x00\x00"
				"\x00\x59\x5E\x8B\xE5\x5D\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x55\x8B\xEC\x6A\xFF\x68\x98\xAB"
				"\x34\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x48\xA1\x14\x20\x35\x00\x33\xC5\x89\x45\xF0\x56\x50"
				"\x8D\x45\xF4\x64\xA3\x00\x00\x00\x00\x8B\xF1\x89\x75\xC4\x8D\x45\xAC\x89\x75\xC4\x50\x8D\x4D\xC8"
				"\xC7\x45\xC8\x51\x89\xF5\x5A\xC7\x45\xCC\xB5\x0D\x23\x33\xC7\x45\xD0\x9E\xE0\x98\xAA\xC7\x45\xD4"
				"\x94\xE3\x70\xFE\xC7\x45\xD8\x8E\xAE\x3F\xEF\xC7\x45\xDC\xD5\x52\x6F\xE9\xC7\x45\xE0\x8B\xE5\xBC"
				"\xDE\xC7\x45\xE4\x4E\x54\x09\x92\xC7\x45\xE8\x17\xE8\x9C\x36\xC7\x45\xEC\xD0\x69\x03\x47\xE8\x2D"
				"\x3C\x00\x00\x8D\x45\xAC\xC7\x45\xFC\x00\x00\x00\x00\x50\x8B\xCE\xE8\x5B\xC7\xFF\xFF\x8B\x55\xC0"
				"\x83\xFA\x10\x72\x2E\x8B\x4D\xAC\x42\x8B\xC1\x81\xFA\x00\x10\x00\x00\x72\x16\x8B\x49\xFC\x83\xC2"
				"\x23\x2B\xC1\x83\xC0\xFC\x83\xF8\x1F\x76\x06\xFF\x15\x08\xC2\x34\x00\x52\x51\xE8\x1C\xBC\x00\x00"
				"\x83\xC4\x08\xC7\x06\x74\xC5\x34\x00\x8B\xC6\x8B\x4D\xF4\x64\x89\x0D\x00\x00\x00\x00\x59\x5E\x8B"
				"\x4D\xF0\x33\xCD\xE8\x12\xBE\x00\x00\x8B\xE5\x5D\xC3\xCC\xCC\xCC\x55\x8B\xEC\x6A\xFF\x68\x98\xAB"
				"\x34\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x48\xA1\x14\x20\x35\x00\x33\xC5\x89\x45\xF0\x56\x50"
				"\x8D\x45\xF4\x64\xA3\x00\x00\x00\x00\x8B\xF1\x89\x75\xC4\x8D\x45\xAC\x89\x75\xC4\x50\x8D\x4D\xC8"
				"\xC7\x45\xC8\x51\x89\xF5\x5A\xC7\x45\xCC\xB5\x0D\x23\x33\xC7\x45\xD0\x9E\xE0\x90\x91\xC7\x45\xD4"
				"\xE5\xB1\x20\xF0\xC7\x45\xD8\xB9\xD7\x01\xE4\xC7\x45\xDC\xC3\x2E\x24\x45\xC7\x45\xE0\xAE\xCB\xA0"
				"\x24\xC7\x45\xE4\x4F\x54\x09\x92\xC7\x45\xE8\x17\xE8\x9C\x36\xC7\x45\xEC\xD0\x69\x03\x47\xE8\x3D"
				"\x3B\x00\x00\x8D\x45\xAC\xC7\x45\xFC\x00\x00\x00\x00\x50\x8B\xCE\xE8\x6B\xC6\xFF\xFF\x8B\x55\xC0"
				"\x83\xFA\x10\x72\x2E\x8B\x4D\xAC\x42\x8B\xC1\x81\xFA\x00\x10\x00\x00\x72\x16\x8B\x49\xFC\x83\xC2"
				"\x23\x2B\xC1\x83\xC0\xFC\x83\xF8\x1F\x76\x06\xFF\x15\x08\xC2\x34\x00\x52\x51\xE8\x2C\xBB\x00\x00"
				"\x83\xC4\x08\xC7\x06\x74\xC5\x34\x00\x8B\xC6\x8B\x4D\xF4\x64\x89\x0D\x00\x00\x00\x00\x59\x5E\x8B"
				"\x4D\xF0\x33\xCD\xE8\x22\xBD\x00\x00\x8B\xE5\x5D\xC3\xCC\xCC\xCC\x55\x8B\xEC\x6A\xFF\x68\x48\xA8"
				"\x34\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x20\x56\xA1\x14\x20\x35\x00\x33\xC5\x50\x8D\x45\xF4"
				"\x64\xA3\x00\x00\x00\x00\x8B\xF1\x89\x75\xEC\x8D\x45\xD4\x89\x75\xEC\x50\x8D\x4D\xF3\xE8\x76\x36"
				"\x00\x00\x50\x8B\xCE\xC7\x45\xFC\x00\x00\x00\x00\xE8\xC7\xC5\xFF\xFF\x8B\x55\xE8\x83\xFA\x10\x72"
				"\x2E\x8B\x4D\xD4\x42\x8B\xC1\x81\xFA\x00\x10\x00\x00\x72\x16\x8B\x49\xFC\x83\xC2\x23\x2B\xC1\x83"
				"\xC0\xFC\x83\xF8\x1F\x76\x06\xFF\x15\x08\xC2\x34\x00\x52\x51\xE8\x88\xBA\x00\x00\x83\xC4\x08\xC7"
				"\x06\x74\xC5\x34\x00\x8B\xC6\x8B\x4D\xF4\x64\x89\x0D\x00\x00\x00\x00\x59\x5E\x8B\xE5\x5D\xC3\xCC"
				"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
				"\x55\x8B\xEC\x6A\xFF\x68\x98\xAB\x34\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x48\xA1\x14\x20\x35"
				"\x00\x33\xC5\x89\x45\xF0\x56\x50\x8D\x45\xF4\x64\xA3\x00\x00\x00\x00\x8B\xF1\x89\x75\xC4\x8D\x45"
				"\xAC\x89\x75\xC4\x50\x8D\x4D\xC8\xC7\x45\xC8\x51\x89\xF5\x5A\xC7\x45\xCC\xB5\x0D\x23\x33\xC7\x45"
				"\xD0\x9E\xE0\x92\x9A\xC7\x45\xD4\xE5\xB5\x7F\x20\xC7\x45\xD8\x87\xAA\x35\xE6\xC7\x45\xDC\xD5\x2E"
				"\x79\xE9\xC7\x45\xE0\xA9\xF1\xD8\x3F\xC7\x45\xE4\x4F\x54\x09\x92\xC7\x45\xE8\x17\xE8\x9C\x36\xC7"
				"\x45\xEC\xD0\x69\x03\x47\xE8\x9D\x39\x00\x00\x8D\x45\xAC\xC7\x45\xFC\x00\x00\x00\x00\x50\x8B\xCE"
				"\xE8\xCB\xC4\xFF\xFF\x8B\x55\xC0\x83\xFA\x10\x72\x2E\x8B\x4D\xAC\x42\x8B\xC1\x81\xFA\x00\x10\x00"
				"\x00\x72\x16\x8B\x49\xFC\x83\xC2\x23\x2B\xC1\x83\xC0\xFC\x83\xF8\x1F\x76\x06\xFF\x15\x08\xC2\x34"
			);
		}

		// arguments to pass to the loader thread
		const ManualMapData<Ptr> data{
			.modulebase = Ptr(module_base),
			.getprocaddress = Ptr(process.get_proc_addr(enc_str("kernel32.dll"), enc_str("GetProcAddress"))),
			.loadlibrary = Ptr(process.get_proc_addr(enc_str("kernel32.dll"), enc_str("LoadLibraryA")))
		};

		// allocate and copy the loader data to the process's memory space
		const auto thread_argument{ uintptr_t(process.alloc_virt_mem(sizeof(data))) };
		const mango::ScopeGuard _guard{ [&]() { process.free_virt_mem(thread_argument); } };
		process.write(thread_argument, data);

		// execute our shellcode
		shellcode.execute(process, thread_argument);

		return uintptr_t(module_base);
	}
} // namespace

namespace mango {
	// inject a dll into another process (using LoadLibrary)
	uintptr_t load_library(const Process& process, const std::string_view dll_path) {
		const auto func_addr{ process.get_proc_addr(enc_str("kernel32.dll"), enc_str("LoadLibraryA")) };
		if (!func_addr)
			throw FailedToGetFunctionAddress{};

		ProcessMemoryAllocator allocator(process);
		const ScopeGuard _guard(&ProcessMemoryAllocator::release, std::ref(allocator));

		// this will be where the dll path is stored in the process
		const auto str_address(allocator.allocate(dll_path.size() + 1));

		// for the return value of LoadLibraryA
		const auto ret_address(allocator.allocate(process.get_ptr_size()));

		// write the dll name
		const std::string null_terminated_path(dll_path);
		process.write(str_address, null_terminated_path.c_str(), null_terminated_path.size() + 1);

		// this shellcode basically just calls LoadLibraryA()
		if (process.is_64bit()) {
			Shellcode(
				"\x48\x83\xEC\x20", // sub rsp, 0x20
				"\x48\xB9", str_address, // movabs rcx, str_address
				"\x48\xB8", func_addr, // movabs rax, func_addr
				"\xFF\xD0", // call rax
				"\x48\xA3", ret_address, // movabs [ret_address], rax
				"\x48\x83\xC4\x20", // add rsp, 0x20
				"\x31\xC0", // xor eax, eax
				shw::ret()
			).execute(process, allocator);

			return uintptr_t(process.read<uint64_t>(ret_address));
		} else {
			Shellcode(
				"\x68", uint32_t(str_address), // push str_address
				"\xB8", uint32_t(func_addr), // mov eax, func_addr
				"\xFF\xD0", // call eax
				"\xA3", uint32_t(ret_address), // mov [ret_address], eax
				shw::ret()
			).execute(process, allocator);

			return uintptr_t(process.read<uint32_t>(ret_address));
		}
	}

	// manual map a dll into another process
	uintptr_t manual_map(const Process& process, const std::string_view dll_path) {
		const std::string null_terminated_path{ dll_path };

		// open file
		const auto file_handle{ CreateFileA(
			null_terminated_path.c_str(),
			GENERIC_READ,
			FILE_SHARE_READ | FILE_SHARE_WRITE,
			nullptr,
			OPEN_EXISTING,
			FILE_ATTRIBUTE_NORMAL,
			nullptr) };

		// invalid handle
		if (file_handle == INVALID_HANDLE_VALUE)
			throw InvalidFileHandle{ mango_format_w32status(GetLastError()) };

		// make sure we close the handle!
		const ScopeGuard _guard{ &CloseHandle, file_handle };

		// file size
		const auto file_size{ GetFileSize(file_handle, NULL) };
		if (file_size == INVALID_FILE_SIZE)
			throw InvalidFileSize{ mango_format_w32status(GetLastError()) };

		// allocate a buffer for the file contents
		const auto image_buffer{ std::make_unique<uint8_t[]>(file_size) };
		if (!image_buffer)
			throw FailedToAllocateVirtualMemory{};

		// read file
		if (DWORD num_bytes{ 0 }; !ReadFile(file_handle, image_buffer.get(), file_size, &num_bytes, FALSE))
			throw FailedToReadFile{ mango_format_w32status(GetLastError()) };

		return manual_map(process, image_buffer.get());
	}
	uintptr_t manual_map(const Process& process, const uint8_t* const image) {
		return process.is_64bit() ?
			manual_map_internal<true>(process, image) :
			manual_map_internal<false>(process, image);
	}
} // namespace mango